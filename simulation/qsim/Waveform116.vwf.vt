// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/11/2021 20:53:27"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          EU
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module EU_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLOCK;
reg [9:0] CMI;
// wires                                               
wire [3:0] rega;
wire [3:0] regb;
wire [3:0] regc;

// assign statements (if any)                          
EU i1 (
// port map - connection between master ports and signals/registers   
	.CLOCK(CLOCK),
	.CMI(CMI),
	.rega(rega),
	.regb(regb),
	.regc(regc)
);
initial 
begin 
#1000000 $finish;
end 

// CLOCK
initial
begin
	repeat(12)
	begin
		CLOCK = 1'b0;
		CLOCK = #40000 1'b1;
		# 40000;
	end
	CLOCK = 1'b0;
end 
// CMI[ 9 ]
initial
begin
	CMI[9] = 1'b0;
	CMI[9] = #190000 1'b1;
	CMI[9] = #160000 1'b0;
end 
// CMI[ 8 ]
initial
begin
	CMI[8] = 1'b1;
	CMI[8] = #190000 1'b0;
	CMI[8] = #70000 1'b1;
	CMI[8] = #90000 1'b0;
end 
// CMI[ 7 ]
initial
begin
	CMI[7] = 1'b0;
end 
// CMI[ 6 ]
initial
begin
	CMI[6] = 1'b0;
	CMI[6] = #100000 1'b1;
	CMI[6] = #160000 1'b0;
end 
// CMI[ 5 ]
initial
begin
	CMI[5] = 1'b1;
	CMI[5] = #190000 1'b0;
end 
// CMI[ 4 ]
initial
begin
	CMI[4] = 1'b1;
	CMI[4] = #190000 1'b0;
	CMI[4] = #70000 1'b1;
	CMI[4] = #90000 1'b0;
end 
// CMI[ 3 ]
initial
begin
	CMI[3] = 1'b0;
	CMI[3] = #100000 1'b1;
	CMI[3] = #160000 1'b0;
end 
// CMI[ 2 ]
initial
begin
	CMI[2] = 1'b1;
	CMI[2] = #100000 1'b0;
end 
// CMI[ 1 ]
initial
begin
	CMI[1] = 1'b0;
end 
// CMI[ 0 ]
initial
begin
	CMI[0] = 1'b1;
	CMI[0] = #260000 1'b0;
end 
endmodule

